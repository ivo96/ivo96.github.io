{"version":3,"sources":["components/Form.js","components/Titles.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","onSubmit","this","props","getWeather","type","name","placeholder","Component","Titles","Weather","city","country","temperature","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","className","Titles_Titles","Form_Form","Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,YACvBN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CT,EAAAC,EAAAC,cAAA,sCANsBQ,aCAbC,mLAEjB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,iDAL4BQ,aCAfE,mLAEjB,OACEZ,EAAAC,EAAAC,cAAA,WACIE,KAAKC,MAAMQ,MAAQT,KAAKC,MAAMS,SAAWd,EAAAC,EAAAC,cAAA,uBAAgBE,KAAKC,MAAMQ,KAA3B,KAAqCT,KAAKC,MAAMS,SACzFV,KAAKC,MAAMU,aAAef,EAAAC,EAAAC,cAAA,yBAAkBE,KAAKC,MAAMU,YAA7B,UAC1BX,KAAKC,MAAMW,aAAehB,EAAAC,EAAAC,cAAA,uBAAgBE,KAAKC,MAAMW,aACrDZ,KAAKC,MAAMY,OAASjB,EAAAC,EAAAC,cAAA,SAAKE,KAAKC,MAAMY,eAPTP,aCG/BQ,EAAU,mCAyDDC,6MArDbC,MAAQ,CACNL,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,iBAAaK,EACbJ,WAAOI,KAGTf,iDAAa,SAAAgB,EAAOC,GAAP,IAAAV,EAAAW,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBAEIlB,EAAOU,EAAES,OAAOC,SAASpB,KAAKqB,MAHzBN,EAAAE,KAAA,EAKYK,MAAK,oDAAAC,OAAqDvB,EAArD,WAAAuB,OAAmElB,EAAnE,kBALjB,cAKLM,EALKI,EAAAS,KAAAT,EAAAE,KAAA,EAMQN,EAASc,OANjB,OAMLb,EANKG,EAAAS,KAQRxB,GACD0B,QAAQC,IAAIf,GACZgB,EAAKC,SAAS,CACd3B,YAAaU,EAAKkB,KAAKC,KACvB/B,KAAMY,EAAKjB,KACXM,QAASW,EAAKoB,IAAI/B,QAClBE,YAAaS,EAAKqB,QAAQ,GAAG9B,YAC7BC,MAAO,MAGPwB,EAAKC,SAAS,CACZ3B,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,iBAAaK,EACbJ,MAAO,wBAvBA,wBAAAW,EAAAmB,SAAAzB,EAAAlB,uIA6BX,OACEJ,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,OACbhD,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,CAAM5C,WAAYF,KAAKE,aACvBN,EAAAC,EAAAC,cAACiD,EAAD,CACApC,YAAaX,KAAKgB,MAAML,YACxBF,KAAMT,KAAKgB,MAAMP,KACjBC,QAASV,KAAKgB,MAAMN,QACpBE,YAAaZ,KAAKgB,MAAMJ,YACxBC,MAAOb,KAAKgB,MAAMH,gBAhDRP,aCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c99d2e8e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Form extends Component {\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.props.getWeather} >\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n            <button>Get Weather</button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Titles extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Show Me The Weather</h1>\n        <h3>Weather App From The Future</h3>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Weather extends Component {\n  render() {\n    return (\n      <div>\n        { this.props.city && this.props.country && <p> Location: { this.props.city }, { this.props.country }</p> } \n        { this.props.temperature && <p>Temperature: { this.props.temperature } Â°C</p> }\n        { this.props.description && <p>Condition: { this.props.description }</p> }  \n        { this.props.error && <p>{ this.props.error }</p> }    \n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Titles from './components/Titles';\nimport Weather from './components/Weather';\n\nconst API_KEY = '23638e339f702384a55ce1c20bd3c8c0';\n\nclass App extends Component {\n\n  state = {\n    temperature: undefined,     // initial state of the object\n    city: undefined,\n    country: undefined,\n    description: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();   // preventing page refresh\n    \n    const city = e.target.elements.city.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n\n    if(city){\n      console.log(data);\n      this.setState({\n      temperature: data.main.temp,  // updating values\n      city: data.name,\n      country: data.sys.country,\n      description: data.weather[0].description,\n      error: \"\"\n    })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        error: \"Please Enter A City\",\n    })\n    } \n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Titles />\n        <Form getWeather={this.getWeather} />\n        <Weather \n        temperature={this.state.temperature}\n        city={this.state.city}\n        country={this.state.country}\n        description={this.state.description}\n        error={this.state.error}\n         />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}